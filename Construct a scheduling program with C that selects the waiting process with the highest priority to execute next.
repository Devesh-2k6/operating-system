#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int id;
    int priority;
    int isWaiting;
} Process;

Process processList[MAX_PROCESSES];
int processCount = 0;

void addProcess(int id, int priority) {
    if (processCount < MAX_PROCESSES) {
        processList[processCount].id = id;
        processList[processCount].priority = priority;
        processList[processCount].isWaiting = 1; // Mark as waiting
        processCount++;
    } else {
        printf("Process list is full.\n");
    }
}

Process* selectHighestPriorityProcess() {
    Process* highestPriorityProcess = NULL;
    for (int i = 0; i < processCount; i++) {
        if (processList[i].isWaiting) {
            if (highestPriorityProcess == NULL || 
                processList[i].priority > highestPriorityProcess->priority) {
                highestPriorityProcess = &processList[i];
            }
        }
    }
    return highestPriorityProcess;
}

void executeProcess(Process* process) {
    if (process != NULL) {
        printf("Executing Process ID: %d with Priority: %d\n", process->id, process->priority);
        process->isWaiting = 0; // Mark as not waiting
    } else {
        printf("No process to execute.\n");
    }
}

int main() {
    addProcess(1, 3);
    addProcess(2, 5);
    addProcess(3, 1);
    
    Process* nextProcess = selectHighestPriorityProcess();
    executeProcess(nextProcess);
    
    return 0;
}
